<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg name)">
   <!-- robot name parameter -->
   <xacro:arg name="name" default="ur"/>
   <!-- import main macro -->  
  <webots>
      <plugin type="webots_ros2_control::Ros2Control" />
  </webots>

  <xacro:macro name="onrobot_vgc10_base_link" params="prefix">
    <link name="${prefix}onrobot_vgc10_base_link">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
        <mass value="0.6" />
        <inertia ixx="1.0E-03" ixy="1.0E-06" ixz="1.0E-06" iyy="1.0E-03" iyz="1.0E-06" izz="1.0E-03" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://vgc10_description/meshes/visual/base_link.stl" />
        </geometry>
        <material name="">
          <color rgba="0.8 0.8 0.8 1" />
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://vgc10_description/meshes/collision/base_link.stl" />
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}onrobot_vgc10_joint" type="fixed">
      <!-- The parent link must be read from the robot model it is attached to. -->
      <parent link="tool0"/>
      <child link="${prefix}onrobot_vgc10_base_link"/>
      <!-- The tool is directly attached to the flange. -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </joint>
  </xacro:macro>

  <xacro:macro name="finger_links" params="prefix">
    <xacro:suction prefix="${prefix}"/>
  </xacro:macro>


  <xacro:macro name="suction" params="prefix">
    <link name="${prefix}suction">
      <inertial>
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
        <mass value="0.2" />
        <inertia ixx="1.0E-03" ixy="1.0E-06" ixz="1.0E-06" iyy="1.0E-03" iyz="1.0E-06" izz="1.0E-03" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://vgc10_description/meshes/visual/suction_cup.stl" />
        </geometry>
        <material name="">
          <color rgba="0.9 0.9 0.9 1" />
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://vgc10_description/meshes/collision/suction_cup.stl" />
        </geometry>
      </collision>
    </link>
  </xacro:macro>

  <xacro:macro name="suction_joint" params="prefix">
    <joint name="${prefix}_suction_joint" type="fixed">
      <origin xyz="0 0 0.094901" rpy="0 0 0" />
      <parent link="${prefix}onrobot_vgc10_base_link" />
      <child link="${prefix}suction" />
      <axis xyz="1 0 0" />
    </joint>
  </xacro:macro>


  <xacro:macro name="onrobot_vgc10" params="prefix">
    <xacro:onrobot_vgc10_base_link prefix="${prefix}"/>
    <xacro:finger_links prefix="${prefix}"/>
    <xacro:suction_joint prefix="${prefix}"/>
  </xacro:macro>

   <!-- parameters -->
   <xacro:arg name="prefix" default="" />
   <xacro:arg name="joint_limit_params" default=""/>
   <xacro:arg name="kinematics_params" default=""/>
   <xacro:arg name="physical_params" default=""/>
   <xacro:arg name="visual_params" default=""/>
   <xacro:arg name="transmission_hw_interface" default=""/>
   <xacro:arg name="safety_limits" default="false"/>
   <xacro:arg name="safety_pos_margin" default="0.15"/>
   <xacro:arg name="safety_k_position" default="20"/>
   <!-- ros2_control related parameters -->
   <xacro:arg name="use_fake_hardware" default="false" />
   <xacro:arg name="fake_sensor_commands" default="false" />

   <!-- ************************************************************************* -->
   <!-- UR macro -->
  <xacro:include filename="$(find vgc10_description)/urdf/inc/ur_transmissions.xacro" />
  <xacro:include filename="$(find vgc10_description)/urdf/inc/ur_common.xacro" />

  <xacro:macro name="ur_robot" params="
    prefix
    joint_limits_parameters_file
    kinematics_parameters_file
    physical_parameters_file
    visual_parameters_file
    transmission_hw_interface:=hardware_interface/PositionJointInterface
    safety_limits:=false
    safety_pos_margin:=0.15
    safety_k_position:=20
    use_fake_hardware:=false
    fake_sensor_commands:=false">
    <!-- Load configuration data from the provided .yaml files -->
    <xacro:read_model_data
      joint_limits_parameters_file="${joint_limits_parameters_file}"
      kinematics_parameters_file="${kinematics_parameters_file}"
      physical_parameters_file="${physical_parameters_file}"
      visual_parameters_file="${visual_parameters_file}"/>

    <!-- Data files required by the UR driver -->
    <xacro:arg name="script_filename" default="$(find ur_robot_driver)/resources/ros_control.urscript"/>
    <xacro:arg name="output_recipe_filename" default="$(find ur_robot_driver)/resources/rtde_output_recipe.txt"/>
    <xacro:arg name="input_recipe_filename" default="$(find ur_robot_driver)/resources/rtde_input_recipe.txt"/>
    <xacro:arg name="robot_ip" default="10.0.1.186"/>


    <!-- ros2 control include -->
    <!-- ********************************************************************************************** -->
    <!-- ros2 control macro -->
    <xacro:macro name="ur_ros2_control" params="name prefix
      use_fake_hardware:=false fake_sensor_commands:=false
      script_filename output_recipe_filename
      input_recipe_filename tf_prefix
      hash_kinematics robot_ip">

      <ros2_control name="${name}" type="system">
        <hardware>
            <plugin>webots_ros2_control::Ros2ControlSystem</plugin>
        </hardware>
        <joint name="${prefix}shoulder_pan_joint">
          <command_interface name="position">
            <param name="min">${-2*pi}</param>
            <param name="max">${2*pi}</param>
          </command_interface>
          <command_interface name="velocity">
            <param name="min">-3.15</param>
            <param name="max">3.15</param>
          </command_interface>
          <state_interface name="position"/>
          <state_interface name="velocity"/>
          <state_interface name="effort"/>
        </joint>
        <joint name="${prefix}shoulder_lift_joint">
          <command_interface name="position">
            <param name="min">${-2*pi}</param>
            <param name="max">${2*pi}</param>
          </command_interface>
          <command_interface name="velocity">
            <param name="min">-3.15</param>
            <param name="max">3.15</param>
          </command_interface>
          <state_interface name="position"/>
          <state_interface name="velocity"/>
          <state_interface name="effort"/>
        </joint>
        <joint name="${prefix}elbow_joint">
          <command_interface name="position">
            <param name="min">${-pi}</param>
            <param name="max">${pi}</param>
          </command_interface>
          <command_interface name="velocity">
            <param name="min">-3.15</param>
            <param name="max">3.15</param>
          </command_interface>
          <state_interface name="position"/>
          <state_interface name="velocity"/>
          <state_interface name="effort"/>
        </joint>
        <joint name="${prefix}wrist_1_joint">
          <command_interface name="position">
            <param name="min">${-2*pi}</param>
            <param name="max">${2*pi}</param>
          </command_interface>
          <command_interface name="velocity">
            <param name="min">-3.2</param>
            <param name="max">3.2</param>
          </command_interface>
          <state_interface name="position"/>
          <state_interface name="velocity"/>
          <state_interface name="effort"/>
        </joint>
        <joint name="${prefix}wrist_2_joint">
          <command_interface name="position">
            <param name="min">${-2*pi}</param>
            <param name="max">${2*pi}</param>
          </command_interface>
          <command_interface name="velocity">
            <param name="min">-3.2</param>
            <param name="max">3.2</param>
          </command_interface>
          <state_interface name="position"/>
          <state_interface name="velocity"/>
          <state_interface name="effort"/>
        </joint>
        <joint name="${prefix}wrist_3_joint">
          <command_interface name="position">
            <param name="min">${-2*pi}</param>
            <param name="max">${2*pi}</param>
          </command_interface>
          <command_interface name="velocity">
            <param name="min">-3.2</param>
            <param name="max">3.2</param>
          </command_interface>
          <state_interface name="position"/>
          <state_interface name="velocity"/>
          <state_interface name="effort"/>
        </joint>
        <sensor name="tcp_fts_sensor">
          <state_interface name="force.x"/>
          <state_interface name="force.y"/>
          <state_interface name="force.z"/>
          <state_interface name="torque.x"/>
          <state_interface name="torque.y"/>
          <state_interface name="torque.z"/>
        </sensor>

        <!-- NOTE The following are joints used only for testing with fake hardware and will change in the future -->
        <joint name="speed_scaling">
          <state_interface name="speed_scaling_factor"/>
          <param name="initial_speed_scaling_factor">1</param>
          <command_interface name="target_speed_fraction_cmd"/>
          <command_interface name="target_speed_fraction_async_success"/>
        </joint>

        <joint name="gpio">
          <command_interface name="standard_digital_output_cmd_0"/>
          <command_interface name="standard_digital_output_cmd_1"/>
          <command_interface name="standard_digital_output_cmd_2"/>
          <command_interface name="standard_digital_output_cmd_3"/>
          <command_interface name="standard_digital_output_cmd_4"/>
          <command_interface name="standard_digital_output_cmd_5"/>
          <command_interface name="standard_digital_output_cmd_6"/>
          <command_interface name="standard_digital_output_cmd_7"/>
          <command_interface name="standard_digital_output_cmd_8"/>
          <command_interface name="standard_digital_output_cmd_9"/>
          <command_interface name="standard_digital_output_cmd_10"/>
          <command_interface name="standard_digital_output_cmd_11"/>
          <command_interface name="standard_digital_output_cmd_12"/>
          <command_interface name="standard_digital_output_cmd_13"/>
          <command_interface name="standard_digital_output_cmd_14"/>
          <command_interface name="standard_digital_output_cmd_15"/>
          <command_interface name="standard_digital_output_cmd_16"/>
          <command_interface name="standard_digital_output_cmd_17"/>

          <command_interface name="standard_analog_output_cmd_0"/>
          <command_interface name="standard_analog_output_cmd_1"/>

          <command_interface name="io_async_success"/>

          <state_interface name="digital_output_0"/>
          <state_interface name="digital_output_1"/>
          <state_interface name="digital_output_2"/>
          <state_interface name="digital_output_3"/>
          <state_interface name="digital_output_4"/>
          <state_interface name="digital_output_5"/>
          <state_interface name="digital_output_6"/>
          <state_interface name="digital_output_7"/>
          <state_interface name="digital_output_8"/>
          <state_interface name="digital_output_9"/>
          <state_interface name="digital_output_10"/>
          <state_interface name="digital_output_11"/>
          <state_interface name="digital_output_12"/>
          <state_interface name="digital_output_13"/>
          <state_interface name="digital_output_14"/>
          <state_interface name="digital_output_15"/>
          <state_interface name="digital_output_16"/>
          <state_interface name="digital_output_17"/>

          <state_interface name="digital_input_0"/>
          <state_interface name="digital_input_1"/>
          <state_interface name="digital_input_2"/>
          <state_interface name="digital_input_3"/>
          <state_interface name="digital_input_4"/>
          <state_interface name="digital_input_5"/>
          <state_interface name="digital_input_6"/>
          <state_interface name="digital_input_7"/>
          <state_interface name="digital_input_8"/>
          <state_interface name="digital_input_9"/>
          <state_interface name="digital_input_10"/>
          <state_interface name="digital_input_11"/>
          <state_interface name="digital_input_12"/>
          <state_interface name="digital_input_13"/>
          <state_interface name="digital_input_14"/>
          <state_interface name="digital_input_15"/>
          <state_interface name="digital_input_16"/>
          <state_interface name="digital_input_17"/>

          <state_interface name="standard_analog_output_0"/>
          <state_interface name="standard_analog_output_1"/>

          <state_interface name="standard_analog_input_0"/>
          <state_interface name="standard_analog_input_1"/>

          <state_interface name="analog_io_type_0"/>
          <state_interface name="analog_io_type_1"/>
          <state_interface name="analog_io_type_2"/>
          <state_interface name="analog_io_type_3"/>

          <state_interface name="tool_mode"/>
          <state_interface name="tool_output_voltage"/>
          <state_interface name="tool_output_current"/>
          <state_interface name="tool_temperature"/>

          <state_interface name="tool_analog_input_0"/>
          <state_interface name="tool_analog_input_1"/>

          <state_interface name="tool_analog_input_type_0"/>
          <state_interface name="tool_analog_input_type_1"/>

          <state_interface name="robot_mode"/>
          <state_interface name="robot_status_bit_0"/>
          <state_interface name="robot_status_bit_1"/>
          <state_interface name="robot_status_bit_2"/>
          <state_interface name="robot_status_bit_3"/>

          <state_interface name="safety_mode"/>
          <state_interface name="safety_status_bit_0"/>
          <state_interface name="safety_status_bit_1"/>
          <state_interface name="safety_status_bit_2"/>
          <state_interface name="safety_status_bit_3"/>
          <state_interface name="safety_status_bit_4"/>
          <state_interface name="safety_status_bit_5"/>
          <state_interface name="safety_status_bit_6"/>
          <state_interface name="safety_status_bit_7"/>
          <state_interface name="safety_status_bit_8"/>
          <state_interface name="safety_status_bit_9"/>
          <state_interface name="safety_status_bit_10"/>
          <state_interface name="program_running"/>
        </joint>

        <gpio name="system_interface">
          <state_interface name="initialized"/>
        </gpio>

      </ros2_control>
    </xacro:macro>
    <!-- ********************************************************************************************** -->



    <!-- ros2 control instance -->
    <xacro:ur_ros2_control
      name="URPositionHardwareInterface" prefix="${prefix}"
      use_fake_hardware="$(arg use_fake_hardware)"
      fake_sensor_commands="$(arg fake_sensor_commands)"
      script_filename="$(arg script_filename)"
      output_recipe_filename="$(arg output_recipe_filename)"
      input_recipe_filename="$(arg input_recipe_filename)"
      tf_prefix=""
      hash_kinematics="${kinematics_hash}"
      robot_ip="$(arg robot_ip)" />

    <!-- Add URDF transmission elements (for ros_control) -->
    <!--<xacro:ur_arm_transmission prefix="${prefix}" hw_interface="${transmission_hw_interface}" />-->
    <!-- Placeholder for ros2_control transmission which don't yet exist -->

    <!-- Added for the table -->
    <!-- <link name="world"/>

    <link name="${prefix}table">
        <visual>
          <geometry>
            <box size="2 1.5 0.05"/>
          </geometry>
          <material name="white">
            <color rgba="1 1 1 1"/>
          </material>
        </visual>
        <collision>
          <geometry>
            <box size="2 1.5 0.05"/>
          </geometry>
        </collision>
    </link>


    <joint name="world_to_table" type="fixed">
      <parent link="world"/>
      <child link="${prefix}table"/>
      <origin xyz="0 0 1" rpy="0 0 0"/>
    </joint>

    <joint name="${prefix}table_to_robot" type="fixed">
      <parent link="${prefix}table"/>
      <child link="${prefix}base"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint> -->

    <!-- ****************************** -->

    <!-- links -  main serial chain -->
    <link name="${prefix}base_link"/>
    <link name="${prefix}base_link_inertia">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${pi}"/>
        <geometry>
          <mesh filename="${base_visual_mesh}"/>
        </geometry>
        <material name="${base_visual_material_name}">
          <color rgba="${base_visual_material_color}"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 ${pi}"/>
        <geometry>
          <mesh filename="${base_collision_mesh}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${base_inertia_radius}" length="${base_inertia_length}" mass="${base_mass}">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:cylinder_inertial>
    </link>
    <link name="${prefix}shoulder_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${pi}"/>
        <geometry>
          <mesh filename="${shoulder_visual_mesh}"/>
        </geometry>
        <material name="${shoulder_visual_material_name}">
          <color rgba="${shoulder_visual_material_color}"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 ${pi}"/>
        <geometry>
          <mesh filename="${shoulder_collision_mesh}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${shoulder_inertia_radius}" length="${shoulder_inertia_length}" mass="${shoulder_mass}">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:cylinder_inertial>
    </link>
    <link name="${prefix}upper_arm_link">
      <visual>
        <origin xyz="0 0 ${shoulder_offset}" rpy="${pi/2} 0 ${-pi/2}"/>
        <geometry>
          <mesh filename="${upper_arm_visual_mesh}"/>
        </geometry>
        <material name="${upper_arm_visual_material_name}">
          <color rgba="${upper_arm_visual_material_color}"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 ${shoulder_offset}" rpy="${pi/2} 0 ${-pi/2}"/>
        <geometry>
          <mesh filename="${upper_arm_collision_mesh}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${upperarm_inertia_radius}" length="${upperarm_inertia_length}" mass="${upper_arm_mass}">
        <origin xyz="${-0.5 * upperarm_inertia_length} 0.0 ${upper_arm_inertia_offset}" rpy="0 ${pi/2} 0" />
      </xacro:cylinder_inertial>
    </link>
    <link name="${prefix}forearm_link">
      <visual>
        <origin xyz="0 0 ${elbow_offset}" rpy="${pi/2} 0 ${-pi/2}"/>
        <geometry>
          <mesh filename="${forearm_visual_mesh}"/>
        </geometry>
        <material name="${forearm_visual_material_name}">
          <color rgba="${forearm_visual_material_color}"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 ${elbow_offset}" rpy="${pi/2} 0 ${-pi/2}"/>
        <geometry>
          <mesh filename="${forearm_collision_mesh}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${forearm_inertia_radius}" length="${forearm_inertia_length}"  mass="${forearm_mass}">
        <origin xyz="${-0.5 * forearm_inertia_length} 0.0 ${elbow_offset}" rpy="0 ${pi/2} 0" />
      </xacro:cylinder_inertial>
    </link>
    <link name="${prefix}wrist_1_link">
      <visual>
        <origin xyz="0 0 ${wrist_1_visual_offset}" rpy="${pi/2} 0 0"/>
        <geometry>
          <mesh filename="${wrist_1_visual_mesh}"/>
        </geometry>
        <material name="${wrist_1_visual_material_name}">
          <color rgba="${wrist_1_visual_material_color}"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 ${wrist_1_visual_offset}" rpy="${pi/2} 0 0"/>
        <geometry>
          <mesh filename="${wrist_1_collision_mesh}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${wrist_1_inertia_radius}" length="${wrist_1_inertia_length}"  mass="${wrist_1_mass}">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:cylinder_inertial>
    </link>
    <link name="${prefix}wrist_2_link">
      <visual>
        <origin xyz="0 0 ${wrist_2_visual_offset}" rpy="0 0 0"/>
        <geometry>
          <mesh filename="${wrist_2_visual_mesh}"/>
        </geometry>
        <material name="${wrist_2_visual_material_name}">
          <color rgba="${wrist_2_visual_material_color}"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 ${wrist_2_visual_offset}" rpy="0 0 0"/>
        <geometry>
          <mesh filename="${wrist_2_collision_mesh}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${wrist_2_inertia_radius}" length="${wrist_2_inertia_length}"  mass="${wrist_2_mass}">
        <origin xyz="0 0 0" rpy="0 0 0" />
      </xacro:cylinder_inertial>
    </link>
    <link name="${prefix}wrist_3_link">
      <visual>
        <origin xyz="0 0 ${wrist_3_visual_offset}" rpy="${pi/2} 0 0"/>
        <geometry>
          <mesh filename="${wrist_3_visual_mesh}"/>
        </geometry>
        <material name="${wrist_3_visual_material_name}">
          <color rgba="${wrist_3_visual_material_color}"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 ${wrist_3_visual_offset}" rpy="${pi/2} 0 0"/>
        <geometry>
          <mesh filename="${wrist_3_collision_mesh}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertial radius="${wrist_3_inertia_radius}" length="${wrist_3_inertia_length}"  mass="${wrist_3_mass}">
        <origin xyz="0.0 0.0 ${-0.5 * wrist_3_inertia_length}" rpy="0 0 0" />
      </xacro:cylinder_inertial>
    </link>

    <!-- joints - main serial chain -->
    <joint name="${prefix}base_link-base_link_inertia" type="fixed">
      <parent link="${prefix}base_link" />
      <child link="${prefix}base_link_inertia" />
      <!-- 'base_link' is REP-103 aligned (so X+ forward), while the internal
           frames of the robot/controller have X+ pointing backwards.
           Use the joint between 'base_link' and 'base_link_inertia' (a dummy
           link/frame) to introduce the necessary rotation over Z (of pi rad).
      -->
      <origin xyz="0 0 0" rpy="0 0 ${pi}" />
    </joint>
    <joint name="${prefix}shoulder_pan_joint" type="revolute">
      <parent link="${prefix}base_link_inertia" />
      <child link="${prefix}shoulder_link" />
      <origin xyz="${shoulder_x} ${shoulder_y} ${shoulder_z}" rpy="${shoulder_roll} ${shoulder_pitch} ${shoulder_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${shoulder_pan_lower_limit}" upper="${shoulder_pan_upper_limit}"
        effort="${shoulder_pan_effort_limit}" velocity="${shoulder_pan_velocity_limit}"/>
      <xacro:if value="${safety_limits}">
         <safety_controller soft_lower_limit="${shoulder_pan_lower_limit + safety_pos_margin}" soft_upper_limit="${shoulder_pan_upper_limit - safety_pos_margin}" k_position="${safety_k_position}" k_velocity="0.0"/>
      </xacro:if>
      <dynamics damping="0" friction="0"/>
    </joint>
    <joint name="${prefix}shoulder_lift_joint" type="revolute">
      <parent link="${prefix}shoulder_link" />
      <child link="${prefix}upper_arm_link" />
      <origin xyz="${upper_arm_x} ${upper_arm_y} ${upper_arm_z}" rpy="${upper_arm_roll} ${upper_arm_pitch} ${upper_arm_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${shoulder_lift_lower_limit}" upper="${shoulder_lift_upper_limit}"
        effort="${shoulder_lift_effort_limit}" velocity="${shoulder_lift_velocity_limit}"/>
      <xacro:if value="${safety_limits}">
         <safety_controller soft_lower_limit="${shoulder_lift_lower_limit + safety_pos_margin}" soft_upper_limit="${shoulder_lift_upper_limit - safety_pos_margin}" k_position="${safety_k_position}" k_velocity="0.0"/>
      </xacro:if>
      <dynamics damping="0" friction="0"/>
    </joint>
    <joint name="${prefix}elbow_joint" type="revolute">
      <parent link="${prefix}upper_arm_link" />
      <child link="${prefix}forearm_link" />
      <origin xyz="${forearm_x} ${forearm_y} ${forearm_z}" rpy="${forearm_roll} ${forearm_pitch} ${forearm_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${elbow_joint_lower_limit}" upper="${elbow_joint_upper_limit}"
        effort="${elbow_joint_effort_limit}" velocity="${elbow_joint_velocity_limit}"/>
      <xacro:if value="${safety_limits}">
         <safety_controller soft_lower_limit="${elbow_joint_lower_limit + safety_pos_margin}" soft_upper_limit="${elbow_joint_upper_limit - safety_pos_margin}" k_position="${safety_k_position}" k_velocity="0.0"/>
      </xacro:if>
      <dynamics damping="0" friction="0"/>
    </joint>
    <joint name="${prefix}wrist_1_joint" type="revolute">
      <parent link="${prefix}forearm_link" />
      <child link="${prefix}wrist_1_link" />
      <origin xyz="${wrist_1_x} ${wrist_1_y} ${wrist_1_z}" rpy="${wrist_1_roll} ${wrist_1_pitch} ${wrist_1_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${wrist_1_lower_limit}" upper="${wrist_1_upper_limit}"
        effort="${wrist_1_effort_limit}" velocity="${wrist_1_velocity_limit}"/>
      <xacro:if value="${safety_limits}">
         <safety_controller soft_lower_limit="${wrist_1_lower_limit + safety_pos_margin}" soft_upper_limit="${wrist_1_upper_limit - safety_pos_margin}" k_position="${safety_k_position}" k_velocity="0.0"/>
      </xacro:if>
      <dynamics damping="0" friction="0"/>
    </joint>
    <joint name="${prefix}wrist_2_joint" type="revolute">
      <parent link="${prefix}wrist_1_link" />
      <child link="${prefix}wrist_2_link" />
      <origin xyz="${wrist_2_x} ${wrist_2_y} ${wrist_2_z}" rpy="${wrist_2_roll} ${wrist_2_pitch} ${wrist_2_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${wrist_2_lower_limit}" upper="${wrist_2_upper_limit}"
             effort="${wrist_2_effort_limit}" velocity="${wrist_2_velocity_limit}"/>
      <xacro:if value="${safety_limits}">
         <safety_controller soft_lower_limit="${wrist_2_lower_limit + safety_pos_margin}" soft_upper_limit="${wrist_2_upper_limit - safety_pos_margin}" k_position="${safety_k_position}" k_velocity="0.0"/>
      </xacro:if>
      <dynamics damping="0" friction="0"/>
    </joint>
    <joint name="${prefix}wrist_3_joint" type="revolute">
      <parent link="${prefix}wrist_2_link" />
      <child link="${prefix}wrist_3_link" />
      <origin xyz="${wrist_3_x} ${wrist_3_y} ${wrist_3_z}" rpy="${wrist_3_roll} ${wrist_3_pitch} ${wrist_3_yaw}" />
      <axis xyz="0 0 1" />
      <limit lower="${wrist_3_lower_limit}" upper="${wrist_3_upper_limit}"
             effort="${wrist_3_effort_limit}" velocity="${wrist_3_velocity_limit}"/>
      <xacro:if value="${safety_limits}">
         <safety_controller soft_lower_limit="${wrist_3_lower_limit + safety_pos_margin}" soft_upper_limit="${wrist_3_upper_limit - safety_pos_margin}" k_position="${safety_k_position}" k_velocity="0.0"/>
      </xacro:if>
      <dynamics damping="0" friction="0"/>
    </joint>

    <!-- ROS-Industrial 'base' frame - base_link to UR 'Base' Coordinates transform -->
    <link name="${prefix}base">
      <visual>
        <origin xyz="0 0 -0.025" rpy="0 0 ${pi}"/>
        <geometry>
          <box size="0.8 0.8 0.05"/>
        </geometry>
        <material name="white">
          <color rgba="1 1 1 1"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 -0.025" rpy="0 0 ${pi}"/>
        <geometry>
          <box size="0.8 0.8 0.05"/>
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}base_link-base_fixed_joint" type="fixed">
      <!-- Note the rotation over Z of pi radians - as base_link is REP-103
           aligned (i.e., has X+ forward, Y+ left and Z+ up), this is needed
           to correctly align 'base' with the 'Base' coordinate system of
           the UR controller.
      -->
      <origin xyz="0 0 0" rpy="0 0 ${pi}"/>
      <parent link="${prefix}base_link"/>
      <child link="${prefix}base"/>
    </joint>

    <!-- ROS-Industrial 'flange' frame - attachment point for EEF models -->
    <link name="${prefix}flange" />
    <joint name="${prefix}wrist_3-flange" type="fixed">
      <parent link="${prefix}wrist_3_link" />
      <child link="${prefix}flange" />
      <origin xyz="0 0 0" rpy="0 ${-pi/2.0} ${-pi/2.0}" />
    </joint>

    <!-- ROS-Industrial 'tool0' frame - all-zeros tool frame -->
    <link name="${prefix}tool0"/>
    <joint name="${prefix}flange-tool0" type="fixed">
      <!-- default toolframe - X+ left, Y+ up, Z+ front -->
      <origin xyz="0 0 0" rpy="${pi/2.0} 0 ${pi/2.0}"/>
      <parent link="${prefix}flange"/>
      <child link="${prefix}tool0"/>
    </joint>
  </xacro:macro>
   <!-- ************************************************************************* -->

   <!-- arm -->
   <xacro:ur_robot
     prefix="$(arg prefix)"
     joint_limits_parameters_file="$(arg joint_limit_params)"
     kinematics_parameters_file="$(arg kinematics_params)"
     physical_parameters_file="$(arg physical_params)"
     visual_parameters_file="$(arg visual_params)"
     transmission_hw_interface="$(arg transmission_hw_interface)"
     safety_limits="$(arg safety_limits)"
     safety_pos_margin="$(arg safety_pos_margin)"
     safety_k_position="$(arg safety_k_position)"
     use_fake_hardware="$(arg use_fake_hardware)"
     fake_sensor_commands="$(arg fake_sensor_commands)"/>
  <xacro:onrobot_vgc10 prefix=""/>
</robot>
